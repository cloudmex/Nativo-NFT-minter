/// ///////////////////////////////////SUBASTA DE TOKENS
    pub fn subastar_nft(&mut self, token_id: TokenId,lowestbidder:String,starts_at:String,expires_at:String){
        let mut info:Vec<String>=Vec::new();

      
        // Verificar  si existe:
        assert_eq!(
            token_id.trim().parse::<u64>().unwrap() <= self.tokens.owner_by_id.len(),
            true,
            "ese token no existe "
        );
            //recuperar el token
            let mut  originaltoken = self
              .tokens
              .token_metadata_by_id.as_ref()
              .and_then(|by_id| by_id.get(&token_id))
              .unwrap();
              //recuperar el owner del token
            let token_owner_id = self.tokens.owner_by_id.get(&token_id);
           //1.- Verificar que seas el owner del token 
            assert_eq!(token_owner_id != Some(env::signer_account_id().to_string()), false, "no eres el dueño del token ");
           
  
              //cambiar la metadata
                  
                  //se  reemplaza los ' por \" en un string plano                "'", "\""
                  let newextradata = str::replace(&originaltoken.extra.as_ref().unwrap().to_string(), "'", "\"");
                  //el string plano se convierte a JSon
                  let mut extradatajson: Extras = serde_json::from_str(&newextradata).unwrap();    
                  //Se modifica el json
                  extradatajson.on_sale = false;
                  extradatajson.on_auction = true;
                  extradatajson.lowestbidder=lowestbidder.clone();
                  extradatajson.price=lowestbidder.clone();
                  extradatajson.highestbidder=0.to_string();
                  extradatajson.expires_at=expires_at;
                  extradatajson.starts_at=starts_at; 
                  // se convierte el Json a un String plano
                  let extradatajsontostring  = serde_json::to_string(&extradatajson).unwrap();          // se  reemplaza los " por \' en un string plano
                  let finalextrajson = str::replace(&extradatajsontostring.to_string(),"\"","'");
                 
                  originaltoken.extra = Some(finalextrajson);
                  //remplazamos la metadata
                  self.tokens
                      .token_metadata_by_id
                      .as_mut()
                      .and_then(|by_id| by_id.insert(&token_id, &originaltoken));
         
                       //Se modifica el Hashmap
                            //se quita de la venta con U-> unavailable
                            info.push("A".to_string()); 
                            //el se mantiene el creador 
                            info.push(extradatajson.creator.clone().to_string());
                            // el nuevo owner es el signer de
                            info.push(token_owner_id.unwrap().to_string());
                            // el precio
                            info.push(lowestbidder.clone().to_string());
                            //el date 
                            info.push(extradatajson.starts_at.clone().to_string());
                                    //insertar nuevo token a Hashmap
                                let mut _map =self.tokenHM.clone();
                                _map.insert(token_id.clone(),info);
                                self.tokenHM=_map.clone();
                //cambiar el numero de nfts disponibles
                  
                  self.n_token_on_auction+=1;
    }
    
    #[payable]
    pub fn ofertar_subasta(&mut self, token_id: TokenId   ){
        let Contractaccount: AccountId = "nativov2.testnet".parse().unwrap();
        let mut amountsended=env::attached_deposit();
 
        // Verificar  si existe:
        assert_eq!(
            token_id.trim().parse::<u64>().unwrap() <= self.tokens.owner_by_id.len(),
            true,
            "ese token no existe "
        );
            //recuperar el token
            let mut  originaltoken = self
              .tokens
              .token_metadata_by_id.as_ref()
              .and_then(|by_id| by_id.get(&token_id))
              .unwrap();
              //recuperar el owner del token
            let token_owner_id = self.tokens.owner_by_id.get(&token_id);
           //1.- Verificar que no seas el owner del token
            assert_eq!(token_owner_id == Some(env::signer_account_id().to_string()), false, "Eres el dueño del token ");
              //cambiar la metadata
                  //se  reemplaza los ' por \" en un string plano                "'", "\""
                  let newextradata = str::replace(&originaltoken.extra.as_ref().unwrap().to_string(), "'", "\"");
                  //el string plano se convierte a JSon
                  let mut extradatajson: Extras = serde_json::from_str(&newextradata).unwrap();    
                  //Se modifica el json
                   //Validar sino ha finalizado  
                let expires_at_token=   extradatajson.expires_at.parse::<i64>().unwrap();
                //let local: DateTime = Local::now();
                
              //   let now = Instant::now();
               
            //   //  let noww= chrono::offset::Utc::now().timestamp() ;
              //      log!("token date : {},today: {}",(expires_at_token as u64)*1000000,env::block_timestamp());  
             assert_eq!((expires_at_token as u64)*1000000
                        < env::block_timestamp(),
                           false,// self.finalizar_subasta(token_id.clone())
                             "la subasta ya terminó" );  
                        //     log!("low:{},high:{},send:{}", extradatajson.lowestbidder.parse::<u128>().unwrap(),extradatajson.highestbidder.parse::<u128>().unwrap(),amountsended);
                assert_eq!( extradatajson.lowestbidder.parse::<u128>().unwrap() > amountsended, false, "la cantidad enviada es menos que el minimo");
                assert_eq!( extradatajson.highestbidder.parse::<u128>().unwrap() >= amountsended, false, "la cantidad enviada es menor o igual que la ultima puja");
                                                
                  if extradatajson.lowestbidder.parse::<u128>().unwrap() <= amountsended
                         && extradatajson.highestbidder.parse::<u128>().unwrap() < amountsended {
                    if extradatajson.highestbidder.parse::<u128>().unwrap() > 0 {
                              //regresar el bid al singer anterior
                                Promise::new(extradatajson.adressbidder.clone().to_string()).transfer(extradatajson.highestbidder.parse::<u128>().unwrap());
                        }
                            //actualizar el nuevo  signer y bid
                                extradatajson.highestbidder =amountsended.to_string();
                                extradatajson.adressbidder=env::signer_account_id().to_string();
                                Promise::new(Contractaccount.clone().to_string()).transfer( amountsended.clone() );

                                // se convierte el Json a un String plano
                        let extradatajsontostring  = serde_json::to_string(&extradatajson).unwrap();          // se  reemplaza los " por \' en un string plano
                        let finalextrajson = str::replace(&extradatajsontostring.to_string(),"\"","'");
                        originaltoken.extra = Some(finalextrajson);
                        //remplazamos la metadata
                        self.tokens
                            .token_metadata_by_id
                            .as_mut()
                            .and_then(|by_id| by_id.insert(&token_id, &originaltoken));
                        //cambiar el numero de nfts disponibles
                        // List<token ,List<signer,bid>>  lists de subasta -> lista de offertas
                        let mut bidding_info = HashMap::new();
                        let mut _map = USER_TOKEN_HASHMAP.lock().unwrap();
                        bidding_info.insert(env::signer_account_id().to_string(),amountsended.to_string());
                     //   _map.insert(token_id,bidding_info);
                         
                  }
                  
    }
    pub fn finalizar_subasta(&mut self, token_id: TokenId) -> bool {
        let Contractaccount: AccountId = "nativov2.testnet".parse().unwrap();
        let mut info:Vec<String>=Vec::new();

        // Verificar  si existe:
        assert_eq!(
            token_id.trim().parse::<u64>().unwrap() <= self.tokens.owner_by_id.len(),
            true,
            "ese token no existe "
        );
            //recuperar el token
            let mut  originaltoken = self
              .tokens
              .token_metadata_by_id.as_ref()
              .and_then(|by_id| by_id.get(&token_id))
              .unwrap();
              //recuperar el owner del token
            let token_owner_id = self.tokens.owner_by_id.get(&token_id);
            //se  reemplaza los ' por \" en un string plano                "'", "\""
            let newextradata = str::replace(&originaltoken.extra.as_ref().unwrap().to_string(), "'", "\"");
            //el string plano se convierte a JSon
            let mut extradatajson: Extras = serde_json::from_str(&newextradata).unwrap();    
            //Validar si ha finalizado
           
              /*   assert_eq!( extradatajson.expires_at.parse::<i64>().unwrap()
            <
                 chrono::offset::Utc::now().timestamp()  , false,"la subasta aun no termina" );
            */
            let amount =extradatajson.highestbidder.parse::<f64>().unwrap();
            //si ya termino la subasta
            //pagamos las ganancias al al onwer anterior,ganancias al contrato y  regalias al creator
                     //obtener la regalia,la comision de Nativo y el pagoa al autor del token
                        let mut  res:f64=0.0;
                        let mut  roy:f64=0.0;
                        let mut  gains:f64=0.0;
                        let mut  pay:f64=0.0;
                        roy  = amount  *0.10;
                        gains= amount  *0.03;
                        pay  = amount  *0.87;
                    //transferir los nears
                    Promise::new( token_owner_id.as_ref().unwrap().to_string() ).transfer(pay as  u128);
                    //TODO: transferir la regalia del token
                    Promise::new(extradatajson.creator.clone()).transfer(roy as u128);
                    //TODO: transferir la regalia del token
                    Promise::new(Contractaccount.clone()).transfer(gains as u128);
                        //cambiamos el on sale/on auction a false
                        if extradatajson.highestbidder.parse::<u128>().unwrap() == 0 as u128 {
                            extradatajson.adressbidder=token_owner_id.as_ref().unwrap().to_string();
                        }
                        extradatajson.on_sale=false;
                        extradatajson.on_auction=false;
                        // se convierte el Json a un String plano
                    let extradatajsontostring  = serde_json::to_string(&extradatajson).unwrap();          // se  reemplaza los " por \' en un string plano
                    let finalextrajson = str::replace(&extradatajsontostring.to_string(),"\"","'");
                    originaltoken.extra = Some(finalextrajson);
                    //remplazamos la metadata
                    self.tokens
                        .token_metadata_by_id
                        .as_mut()
                        .and_then(|by_id| by_id.insert(&token_id, &originaltoken));
            //el costo/subastaminima no se modifica hasta que lo ponga a la venta/subasta
            //lo transferimos al nuevo onwer
            //
            self.tokens
            .internal_transfer_unguarded(&token_id, &token_owner_id.as_ref().unwrap().to_string(), &extradatajson.adressbidder.to_string());
            
              //Se modifica el Hashmap
                    //se quita de la venta con U-> unavailable
                    info.push("U".to_string()); 
                    //el se mantiene el creador 
                    info.push(extradatajson.creator.clone().to_string());
                    // el nuevo owner es el signer de
                    info.push(token_owner_id.unwrap().to_string());
                    // el precio
                    info.push(extradatajson.price.clone().to_string());
                    //el date 
                    info.push(extradatajson.starts_at.clone().to_string());
                            //insertar nuevo token a Hashmap
                        let mut _map =self.tokenHM.clone();
                        _map.insert(token_id.clone(),info);
                        self.tokenHM=_map.clone();

            self.n_token_on_auction-=1;
        return false ;
    }
    //////////////////////////////////////SUBASTA DE TOKENS